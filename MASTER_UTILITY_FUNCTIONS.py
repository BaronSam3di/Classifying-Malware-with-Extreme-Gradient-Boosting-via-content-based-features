

import os
import csv  # for ASM_SampleToPredict function
import smtplib # for email notification function
import pandas as pd
import pickle # for storing objects  

##############################################################################

def OpCodeReference(file = "C:/Users/Geoffrey/Desktop/Msc DS PC 10 06 2018/Final Project/IMPLIMENTATION/PCA40_x86_OpCode_ref.csv" ):
    '''
    Exstacts all the opcodes from a reference file and returns a set all in lowers their case
    '''
    fileobject = open(file)              # the file to be read
    opcodeSet = set()                    # initiate the OutPut container
    for line in fileobject.readlines():  # Run through the file to Lower the case and add to the set
        OPcode = line.strip()
        opcodeSet.add(OPcode.lower())
    return(opcodeSet)
    fileobject.close()


##############################################################################
            
def GetFileName(folder):
    '''
    Yields all the .asm file names in a directory
    '''
    for fn in os.listdir(folder):
        if fn.endswith(".asm"):
            yield (fn)

##############################################################################

def GetFileSize(address):               # default .ASM files but can be specifiied
    '''
    returns file size in bytes as an integer
    '''
    size =  os.path.getsize(address)
    return size  

##############################################################################


def GetWhiteSpaces(file):
    
    '''
    Returns int of the amount of white spaces in file
    '''
    WhiteSpaces = 0
    inFile = open(file, encoding="ANSI" )
    for line in inFile.readlines():
        for char in line:
                if char == " ":
                    WhiteSpaces = WhiteSpaces + 1
    inFile.close()
    return WhiteSpaces

 
##############################################################################


def GetTotalChars(file):
    ''' 
    Returns int of the amount of chars in file 
    '''
    chars = 0
    inFile = open(file, encoding="ANSI" )
    for line in inFile.readlines():
        for char in line:
                    chars = chars + 1
    inFile.close()
    return chars
##############################################################################

        
def OpCodeReferenceDICT(file = "C:/Users/Geoffrey/Desktop/Msc DS PC 22 08 2018/Final Project/IMPLIMENTATION/PCA40_x86_OpCode_ref1.csv" ):

    ''' Exstacts all the opcodes from a reference file and returns a dict all in lowers their case '''
    
    fileobject = open(file) # the file to be read
    OpCodeDict = {}
    
    for line in fileobject.readlines():  ### Run through the file to Lower the case and add to the dict
        OPcode = line.strip()
        OpCodeDict[OPcode.lower()] = 0
    fileobject.close()
    return OpCodeDict

##############################################################################

def trainLabels(file = "C:/Users/Geoffrey/Desktop/Msc DS PC 10 06 2018/Final Project/IMPLIMENTATION/trainLabels.csv" ):

    """
          Returns a dict of 10,000+ training labels ( Keys) and their family (Values) 1-9.
          The Csv file used has been swapped around so the family is in the A colums and the Hash of that sample in the B colum
          
    """
    fileobject = open(file) # the file to be read
    MW_FamilyDict = {}
    for line in fileobject.readlines():  ### Run through the file to Lower the case and add to the dict
        NAME_FAM = line.split(",")
        MW_FamilyDict[NAME_FAM[0]] = NAME_FAM[1].strip("\n")
    fileobject.close()
    
    return MW_FamilyDict
##############################################################################
        
def MalwareStatsGenerator(TargetFile,ReferenceDict,WhiteSpaces,FileName,FileSize, MW = "N/a"):
    
    '''
    Returns a Dictionary of opcodes and thier counts from a file as a key value pair.
    '''
    
    TargetFile = open(TargetFile, encoding="ANSI")
     
    returnDict = {} # Dictionary to be returned
    REF = OpCodeReferenceDICT() # Refereence Dict of known opcodes 
    # print(REF)
    for i in REF: # loop to initialise opcodes existance in returnDict 
        returnDict[i] = 0
        
    for line in TargetFile.readlines():
        splitline = line.split()
        for i in splitline:
            if i in REF:
                returnDict[i] = returnDict.get(i, 0) + 1
    TargetFile.close()    
    return returnDict

################################################################
def XGBpredictor(Testfile,modelfile):
    
    ''' 
    Takes a csv file and trained XGB modle and outputs a class prediction 
    '''
    
    Testsample = pd.read_csv(Testfile ,encoding = "ISO-8859-1")
    model = open(modelfile,'rb')
    classifier = pickle.load(model) 
    Testdata = Testsample.values
    guess = classifier.predict(Testdata)
    # probs = classifier.predict_proba(Testdata) # will print the probabiltie for all classes 
    print("I think it is class",guess)

################################################################

def reportWriter(ModelName,BestParameters):
    
    '''
    writes a txt report on the best parameters of a Grid search CV of a model 
    '''
    
    divider = "#############################################"
    with open("report.txt" , 'w') as f:
            f.write(divider)
            f.write("\n")
            f.write(ModelName)
            f.write("\n")
            f.write("\n")
            f.write(BestParameters)
            f.write("\n")
            f.write("\n")
            f.write("END OF REPORT")
            f.write("\n")
            f.write(divider)

################################################################  
    
def notify(message = "NA", model = "UNKNOWN MODEL : "):
    
    '''
    notifys via email when a mode lis trained
    '''
    
    FROM = "tradesmen507@gmail.com"
    TO = "healthsbestfriend@gmail.com" 
    
    message = str(message + model)
    
    also = "fishandchips7"
    
    # SMTP_SSL Example
    server_ssl = smtplib.SMTP_SSL('smtp.gmail.com', 465) 
    server_ssl.ehlo() # optional, called by login()
    server_ssl.login(FROM,also)

    # ssl server doesn't support or need tls, so don't call server_ssl.starttls() 
    server_ssl.sendmail(FROM, TO, message )
    #server_ssl.sendmail(FROM, TO, "And another job" )

    #server_ssl.quit()
    server_ssl.close()
    print('(Email report has been sent)')

##############################################################################

def GetSingleFileName(filename):
    '''
    returns the name of file from a selected address    
    '''
    #@ Params - filename: the file whos name to be returned 
    name = os.path.basename(filename)
    return(name)
    
##############################################################################  

def ASM_SampleToPredict(ASMfile,modelfile):
    '''
    This function makes a prediction of the family on an .ASM Malware file and uses an XGB trained model to classify if fro mthe 9 families
    '''
    # @ Param
    # ASMfile: file to be processed
    # refeDICT: dictioanry to reference of features
    # Result - StatsDict: file to be processed
    # StatsDict
    refeDICT = OpCodeReferenceDICT()
    StatsDict = {}
    
    with open('MalwareStatsOP.csv', 'w', newline='') as csvfile:
        fileWriter = csv.DictWriter(csvfile, StatsDict.keys())
        headerWriter = csv.writer(csvfile)
        headerWriter.writerow(refeDICT.keys())
        
        i = GetSingleFileName(ASMfile)
        FileName = i
        MW = "   ??   "
        
        FILESIZE = GetFileSize(ASMfile)
        WHITESPACES = GetWhiteSpaces(ASMfile)
        TOTALCHARS = GetTotalChars(ASMfile)
        StatsDict["FILE NAME"] = i
        StatsDict["TOTALCHARS"] = TOTALCHARS
        StatsDict["FILE SIZE"] = str(FILESIZE)
        StatsDict["WHITESPACES"] = str(WHITESPACES)
       
        Result = MalwareStatsGenerator(ASMfile,refeDICT,WHITESPACES,FileName,FILESIZE,MW)
        
        """
        Need to clear out these from the reference dict but want them at the front of the file
        """
        
        del Result['ï»¿file name'] # 
        del Result['file size']
        del Result['whitespaces']
        del Result['totalchars']   
        
        StatsDict.update(Result)  
        
        del StatsDict['FILE NAME']
        dataFrame = pd.DataFrame(StatsDict,index=[0])
        
        model = open(modelfile,'rb')
        classifier = pickle.load(model) 
        
        Testdata = dataFrame.values
     
        guess = classifier.predict(Testdata)
        
        probs = classifier.predict_proba(Testdata) # .predict_proba - return probabilties for all classes from 1-9 
       
        fileWriter.writerow(StatsDict)
        Result = {} # Resets the Resuklt dictionary
        
        listOfPredictions = [guess[0]] # the greatest class of guess
        obj = list(probs[0]) # a list of 9 probabilities in class order
        
        for i in obj:
            listOfPredictions.append(round(i*100,2)) # scales up prediction scores for % representation        
       
        return listOfPredictions
       

