import os
import glob
import time
start = time.time()
import csv

import smtplib # for email notification function
import pandas as pd
import pickle # for opening saved (pickled) models

##############################################################################

def OpCodeReference(file = "x86_OpCodes.csv" ):

    ''' Exstacts all the opcodes from a reference file and returns a set all in lowers their case '''
    
    fileobject = open(file) # the file to be read
    opcodeSet = set() # initiate the OutPut container
    for line in fileobject.readlines():  ### Run through the file to Lower the case and add to the set
        OPcode = line.strip()
        opcodeSet.add(OPcode.lower())
    return(opcodeSet)
    fileobject.close()

##############################################################################

def GetFileName(folder):

    ''' Yields all the .asm file names in a directory '''
    
    for fn in os.listdir(folder):
        if fn.endswith(".asm"):
            yield (fn)

##############################################################################

def GetFileSize(address): # default .ASM files but can be specifiied

    ''' returns file size in bytes as an integer '''

    size =  os.path.getsize(address)
    return size  

##############################################################################
    
def GetWhiteSpaces(file):
    
    ''' Returns int of the amount of white spaces in file '''
    
    WhiteSpaces = 0
    inFile = open(file, encoding="ANSI" )
    for line in inFile.readlines():
        for char in line:
                if char == " ":
                    WhiteSpaces = WhiteSpaces + 1
    inFile.close()
    return WhiteSpaces


##############################################################################


def GetTotalChars(file):
    ''' Returns int of the amount of chars in file '''
    chars = 0
    inFile = open(file, encoding="ANSI" )
    for line in inFile.readlines():
        for char in line:
                    chars = chars + 1
    inFile.close()
    return chars
##############################################################################

        
def OpCodeReferenceDICT(file = "C:/Users/Geoffrey/Desktop/Msc DS PC 22 08 2018/Final Project/IMPLIMENTATION/x86_OpCodes.csv" ):

    ''' Exstacts all the opcodes from a reference file and returns a dict all in lowers their case '''
    
    fileobject = open(file) # the file to be read
    OpCodeDict = {}
    
    for line in fileobject.readlines():  ### Run through the file to Lower the case and add to the dict
        OPcode = line.strip()
        OpCodeDict[OPcode.lower()] = 0
    fileobject.close()
    return OpCodeDict

##############################################################################

def trainLabels(file = "trainLabels.csv" ):

    """
          Returns a dict of 10,000+ training labels ( Keys) and their family (Values) 1-9.
          The Csv file used has been swapped around so the family is in the A colums and the Hash of that sample in the B colum
          
    """
    fileobject = open(file) # the file to be read
    MW_FamilyDict = {}
    for line in fileobject.readlines():  ### Run through the file to Lower the case and add to the dict
        NAME_FAM = line.split(",")
        MW_FamilyDict[NAME_FAM[0]] = NAME_FAM[1].strip("\n")
    fileobject.close()
    
    return MW_FamilyDict
##############################################################################
        
def MalwareStatsGenerator(TargetFile,ReferenceDict,WhiteSpaces,FileName,FileSize, MW = "N/a"):
    
    '''
    Returns a Dictionary of opcodes and thier counts from a file as a key value pair.
    '''
    
    TargetFile = open(TargetFile, encoding="ANSI")
     
    returnDict = {} # Dictionary to be returned
    REF = OpCodeReferenceDICT() # Refereence Dict of known opcodes 

    for i in REF: # loop to initialise opcodes existance in returnDict 
        returnDict[i] = 0
        
    for line in TargetFile.readlines():
        splitline = line.split()
        for i in splitline:
            if i in REF:
                returnDict[i] = returnDict.get(i, 0) + 1
    TargetFile.close()    
    return returnDict
################################################################
def XGBpredictor(Testfile,modelfile):
    
    ''' 
    Takes a csv file and trained XGB modle and outputs a class prediction 
    '''
    Testsample = pd.read_csv(Testfile ,encoding = "ISO-8859-1")
    model = open(modelfile,'rb')
    classifier = pickle.load(model) 
    Testdata = Testsample.values
    guess = classifier.predict(Testdata)
    # probs = classifier.predict_proba(Testdata) # will print the probabiltie for all classes 
    print("I think it is class",guess)

################################################################

def reportWriter(ModelName,BestParameters):
    ''' writes a txt report on the best parameters of a Grid search CV of a model '''
    
    divider = "#############################################"
    with open("report.txt" , 'w') as f:
            f.write(divider)
            f.write("\n")
            f.write(ModelName)
            f.write("\n")
            f.write("\n")
            f.write(BestParameters)
            f.write("\n")
            f.write("\n")
            f.write("END OF REPORT")
            f.write("\n")
            f.write(divider)

################################################################  
    
def notify(message = "NA", model = "UNKNOWN MODEL : "):
    
    '''
    notifys via email with a message, mainly for model training
    '''
    
    FROM = "tradesmen507@gmail.com"
    TO = "healthsbestfriend@gmail.com" 
    
    message = str(message + model)
    
    also = "fishandchips7"

    server_ssl = smtplib.SMTP_SSL('smtp.gmail.com', 465) 
    server_ssl.ehlo() # optional, called by login()
    server_ssl.login(FROM,also) 
    server_ssl.sendmail(FROM, TO, message )

    server_ssl.close()
    print('(Email report has been sent)')
    
##############################################################################

file = "C:/Users/Geoffrey/Desktop/Msc DS PC 22 08 2018/Final Project/IMPLIMENTATION/asmFOLDER/TheFILE2.asm" 
sampleFile = open(file, encoding="ANSI" )

TraingingSet = "C:/Users/Geoffrey/Desktop/Msc DS PC 22 08 2018/Final Project/IMPLIMENTATION/asmFOLDER/"
OpcodeReferenceDICT = OpCodeReferenceDICT()
dl = glob.glob(r'C:/Users/Geoffrey/Desktop/Msc DS PC 22 08 2018/Final Project/IMPLIMENTATION/asmFOLDER/*.asm')
nl = []
StatsDict = {}

#############################################     MAIN    ################################


MalwareLabels = trainLabels() # Dictionary of the file names and corresponding Malware Family

refeDICT = OpcodeReferenceDICT # Dictionary of all the known opcodes 

with open('CLEANED DATA DEMO RESULT.csv', 'w', newline='') as csvfile: # Create a csv file
    fileWriter = csv.DictWriter(csvfile, StatsDict.keys()) 
    headerWriter = csv.writer(csvfile)
    headerWriter.writerow(refeDICT.keys()) # write feature names and Opcodes to the to the header of the CSV file 


    for i in dl: #                                              This for loop below seems to be critical???????     '''
        pl = i.split(os.sep) # Splits the file name and the file path into two - List
        
        
    for i in GetFileName(TraingingSet): # withthe the file name of the current mall ware sample ...
        FileName = i
        MW = "   ??   "
        refeDICT = OpcodeReferenceDICT
        NameEXTLst = FileName.split(".")
        SampleName = NameEXTLst[0]
        

        FILESIZE = GetFileSize(TraingingSet+i)
        WHITESPACES = GetWhiteSpaces(TraingingSet+i)
        TOTALCHARS = GetTotalChars(TraingingSet+i)
        
        if SampleName in MalwareLabels: # match file stats with their Family Class number
            MW = MalwareLabels.pop('key', MalwareLabels[SampleName]) # pop them from the dictionary

        # write stats to stats dict
        StatsDict["FILE NAME"] = SampleName
        StatsDict["TOTALCHARS"] = TOTALCHARS
        StatsDict["FILE SIZE"] = str(FILESIZE)
        StatsDict["WHITESPACES"] = str(WHITESPACES)
        StatsDict["MALWARE FAMILY"] = MW
        
        Result = MalwareStatsGenerator(TraingingSet+FileName,OpcodeReferenceDICT,WHITESPACES,FileName,FILESIZE,MW)
        # Get result dict for this current file 
        
        """
        Need to clear out these from the reference dict but want them at the front of the file
        """
        del Result['file name']
        del Result['file size']
        del Result['whitespaces']
        del Result['malware family']
        del Result['totalchars']
      
        StatsDict.update(Result)    # Update result Dict with opcode stats 
        fileWriter.writerow(StatsDict) # write stats dict to tnext line of CSV file
          
        Result = {} # reset resultsDICT and repeat..........
                     
# notify()     

 #####################################TIME MEASUREMENT#########################################       
end = time.time()
durration = (end - start)
print("That took ",round(durration,2 ),"Seconds")
