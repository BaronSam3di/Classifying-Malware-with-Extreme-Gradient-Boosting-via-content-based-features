

from MASTER_UTILITY_FUNCTIONS import ASM_SampleToPredict

import tkinter as tkr # version 8.6
from tkinter import ttk
from tkinter import filedialog as tkfd


class predictionApp:
    
    def __init__(self,master): # Master = the window 
        
        self.label = tkr.Label(master,text = "Please open a .asm file and press Run to predict the Malware Family")
        self.label.grid(row = 0 , column = 0, columnspan = 1)
        self.MainFrame = tkr.Frame(master,height = 400, width = 400)
        self.MainFrame.grid()
        self.filename = ""
        self.result = []
        
        ##############################################
        
        self.ControlPanel = tkr.Frame(self.MainFrame)
        self.ControlPanel.config(height = 300, width = 300, relief = "raised")
        self.ControlPanel.grid(row = 2, column = 0, padx = 15, pady = 10)
        
        
        self.OpenButton = tkr.Button(self.ControlPanel,text = "Open file", 
                                     command = self.openfile)
        self.OpenButton.grid(row = 1 , column = 0)
        
        
        self.RunButton = tkr.Button(self.ControlPanel,text = "Run",
                                    command = self.RunButtonPress,
                                    state = (['disabled']))
        self.RunButton.grid(row = 1 , column = 1)
        
        
        self.ClearButton = tkr.Button(self.ControlPanel,text = "Clear",
                                      state = (['disabled']),
                                    command = self.clearAll)
        self.ClearButton.grid(row = 1 , column = 2)
        
        ##############################################
        # DISPLAY PANEL CORE
        self.DisplayPanel = tkr.Frame(self.MainFrame)
        self.DisplayPanel.config(height = 350, width = 380, relief = "sunken")
        self.DisplayPanel.grid(row = 0, column = 0, padx = 10, pady = 15)
        
        # MODEL DISPLAY LABELS
        

        self.XGBameDisplay = tkr.Label(self.DisplayPanel,text = "XGB:",anchor = "w")
        self.XGBameDisplay.grid(row = 11, column = 0)
        
        self.MostLikleyLabel = tkr.Label(self.DisplayPanel, text = "Most Likley Family:")
        self.MostLikleyLabel.grid(row = 3, column = 0)
        
        self.MostLikleyprediction = tkr.Label(self.DisplayPanel,text = "       ",bg = "white",relief = "sunken")
        self.MostLikleyprediction.grid(row = 3, column = 1)
        
        ##############################################
        # DISPLAY PANEL subs
        
        self.familyNames = ["Ramnit","Lollipop","Kelihos_ver3","Vundo","Simda",
                            "Tracur","Kelihos_ver1","Obfuscator.ACY","Gatak"]
        
        self.StatsPanel = tkr.Frame(self.MainFrame)
        self.StatsPanel.config(height = 15, width = 380)
        self.StatsPanel.grid(row = 1, column = 0)
        
        
        ##############################################
        # Ramnit
        self.RamnitLabel = tkr.Label(self.DisplayPanel,text = "Ramnit ",relief = "raised")
        self.RamnitLabel.grid(row = 6, column = 1)
        
        self.XGBRamnitPredictionBox = tkr.Label(self.DisplayPanel,text = " % ",bg = "white", relief = "sunken")
        self.XGBRamnitPredictionBox.grid(row = 11, column = 1)
        
        
        ##############################################
        # Lollipop
        
        self.LollipopLabel = tkr.Label(self.DisplayPanel,text = "    Lollipop   ",relief = "raised",pady = 2)
        self.LollipopLabel.grid(row = 6, column = 2)
        
        self.XGBLollipopPredictionBox = tkr.Label(self.DisplayPanel,text = " % ",bg = "white", relief = "sunken")
        self.XGBLollipopPredictionBox.grid(row =11, column = 2)
        
        
        ##############################################
        # Kelihos_ver3
        self.Kelihos3PredictionLabel = tkr.Label(self.DisplayPanel,text = "  Kelihos_ver3  ",relief = "raised",pady = 2)
        self.Kelihos3PredictionLabel.grid(row = 6, column = 3)
        
        self.XGBKelihos3PredictionBox = tkr.Label(self.DisplayPanel,text = " % ",bg = "white", relief = "sunken")
        self.XGBKelihos3PredictionBox.grid(row =11, column = 3)
        
        
        ##############################################
        # Vundo
        
        self.VundoPredictionLabel = tkr.Label(self.DisplayPanel,text = "     Vundo     ",relief = "raised",pady = 2)
        self.VundoPredictionLabel.grid(row = 6, column = 4)
        
        self.XGBVundoPredictionBox = tkr.Label(self.DisplayPanel,text = " % ",bg = "white", relief = "sunken")
        self.XGBVundoPredictionBox.grid(row =11, column = 4)
        
        ##############################################
        # Simda
        
        self.SimdaPredictionLabel = tkr.Label(self.DisplayPanel,text = "     Simda    ",relief = "raised",pady = 2)
        self.SimdaPredictionLabel.grid(row = 6, column = 5)
        
        self.XGBSimdaPredictionBox = tkr.Label(self.DisplayPanel,text = " % ",bg = "white", relief = "sunken")
        self.XGBSimdaPredictionBox.grid(row =11, column = 5)
        
        ##############################################
        # Tracur
        self.TracurPredictionLabel = tkr.Label(self.DisplayPanel,text = "    Tracur   ",relief = "raised",pady = 2)
        self.TracurPredictionLabel.grid(row = 6, column = 6)
        
        self.XGBTracurPredictionBox = tkr.Label(self.DisplayPanel,text = " % ",bg = "white", relief = "sunken")
        self.XGBTracurPredictionBox.grid(row =11, column = 6)
        
        ##############################################
        # Kelihos_ver1
        
        self.Kelihos1PredictionLabel = tkr.Label(self.DisplayPanel,text = "  Kelihos_ver1 ",relief = "raised",pady = 2)
        self.Kelihos1PredictionLabel.grid(row = 6, column = 7)
        
        self.XGBKelihos1PredictionBox = tkr.Label(self.DisplayPanel,text = " % ",bg = "white", relief = "sunken")
        self.XGBKelihos1PredictionBox.grid(row =11, column = 7)
        
        ##############################################
        #Obfuscator
        
        self.ObfuscatorpredictionLabel = tkr.Label(self.DisplayPanel,text = "Obfuscator.ACY ",relief = "raised",pady = 2)
        self.ObfuscatorpredictionLabel.grid(row = 6, column = 8)
        
        self.XGBObfuscatorPredictionBox = tkr.Label(self.DisplayPanel,text = " % ",bg = "white", relief = "sunken")
        self.XGBObfuscatorPredictionBox.grid(row =11, column = 8)
        
        ##############################################
        # Gatak
        
        self.GatakPredictionLabel = tkr.Label(self.DisplayPanel,text = "      Gatak    ",relief = "raised",pady = 2)
        self.GatakPredictionLabel.grid(row = 6, column = 9)
        
        self.XGBGatakPredictionBox = tkr.Label(self.DisplayPanel,text = " % ",bg = "white", relief = "sunken")
        self.XGBGatakPredictionBox.grid(row =11, column = 9)
        ##############################################
        
    def RunButtonPress(self):
        '''
        Calls the prediction function with the trained model
        '''
        self.OpenButton.config(state = (['disabled']))
        self.ClearButton.config(state = (['disabled']))
        
        
        XGBmodelfile = "XGB_MODEL.pickle"
        self.result = ASM_SampleToPredict(self.filename,XGBmodelfile)
        self.MostLikleyprediction.config(text = (self.result[0]))
        self.XGBRamnitPredictionBox.config(text = str("{}%".format(self.result[1])))
        self.XGBLollipopPredictionBox.config(text = str("{}%".format(self.result[2])))
        self.XGBKelihos3PredictionBox.config(text = str("{}%".format(self.result[3])))
        self.XGBVundoPredictionBox.config(text = str("{}%".format(self.result[4])))
        self.XGBSimdaPredictionBox.config(text = str("{}%".format(self.result[5])))
        self.XGBTracurPredictionBox.config(text = str("{}%".format(self.result[6])))
        self.XGBKelihos1PredictionBox.config(text = str("{}%".format(self.result[7])))
        self.XGBObfuscatorPredictionBox.config(text = str("{}%".format(self.result[8])))
        self.XGBGatakPredictionBox.config(text = str("{}%".format(self.result[9])))
        
        nameIndex = self.result[0]
        self.MostLikleyprediction.config(text = self.familyNames[nameIndex-1]) # Converts the predictio nindex to string for display
        self.ClearButton.config(state = (['active']))
   

    def openfile(self):
        '''
        show an "Open" dialog box and return the path to the selected file
        '''
        filename = str(tkfd.askopenfilename(filetypes=[("Assembly files", "*.asm")]))
        if filename.endswith(".asm"):
            self.RunButton.config(state = (['active']))  
            self.filename = filename
            self.FILEOPENLabel = tkr.Label(self.StatsPanel,text = "FILE: {} ?".format(self.filename),relief = "sunken")
            self.FILEOPENLabel.grid(row = 0, column = 0)
            self.ClearButton.config(state = (['active']))
            return filename
     
        
    def clearAll(self):
        '''
        Resets the interface for the next file to be predicted
        '''
        
        self.MostLikleyprediction.config(text = "    ")
        self.XGBRamnitPredictionBox.config(text = "    ")
        self.XGBLollipopPredictionBox.config(text = "    ")
        self.XGBKelihos3PredictionBox.config(text = "    ")
        self.XGBVundoPredictionBox.config(text = "    ")
        self.XGBSimdaPredictionBox.config(text = "    ")
        self.XGBTracurPredictionBox.config(text = "    ")
        self.XGBKelihos1PredictionBox.config(text = "    ")
        self.XGBObfuscatorPredictionBox.config(text = "    ")
        self.XGBGatakPredictionBox.config(text = "    ")
        self.filename = ""
        self.FILEOPENLabel.config(text = "PLEASE CHOOSE ANOTHER FILE")
        self.RunButton.config(state = (['disabled'])) 
        self.OpenButton.config(state = (['active']))
        return None
         
##############################################
def main():
    root = tkr.Tk()
    app = predictionApp(root)
    root.geometry("800x200+400+200") # xSize, ySize, X loc, Y loc # 
    root.mainloop()
    

if __name__ == "__main__":main()